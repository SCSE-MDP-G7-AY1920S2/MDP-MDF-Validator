extends layout

block content
  h1.header= title
  p.header Enter your MDF below and click the check mark to validate!
  p#prompt.header.hide-elem Obstacle Placement Mode Enabled. Click sample map to add/remove obstacles!
  div#btnConstruct.header.mdf-input-div
    div.input-field.col.s6.mdf-input
      label(for='mdf1') MDF String 1
      input#mdf1.validate(type='text')
      span.helper-text#helper-mdf1(data-error="Invalid")
    div.input-field.col.s12.mdf-input
      label(for='mdf2') MDF String 2
      input#mdf2.validate(type='text')
      span.helper-text#helper-mdf2(data-error="Invalid")

  div#result.header.largetogap.hide-elem Score:
    span#resultScore 0
    |  (
    span#resultC 0
    |  correct,
    span#resultI 0
    |  incorrect,
    span#resultU 0
    |  unexplored)

  div.largetopgap
    table
      tbody
        tr
          td(style={float: 'right'})
            span(style={'text-align': 'center'}) Sample Map
            | &nbsp;&nbsp;&nbsp;
            span
              label
                input.filled-in.checkbox-blue(type='checkbox', onclick='toggleObstacle()')
                span.white-text Enable Object Placement Mode
            br
            div.mdp-container#sampleArena
          td
            span(style={'text-align': 'center'}) Submitted MDF Map
            br
            div.mdp-container#submittedArena

    div.fixed-action-btn.click-to-toggle(style={bottom: '24px', right: '24px'})
      button.btn-floating.btn-large.red
        i.large.material-icons menu
      ul
        li
          span Load Pre-Defined Maps
          a.btn-floating.btn-large.waves-effect.waves-light.btn.modal-trigger.blue.darken-4(href='#selModal')
            i.material-icons map
        li
          span Import Map
          button.btn-floating.btn-large.blue.darken-4(onclick='importMap()')
            i.material-icons cloud_upload
        li
          span Export Map
          button.btn-floating.btn-large.blue.darken-4(onclick='exportMap()')
            i.material-icons cloud_download
        li
          span Validate MDF
          button.btn-floating.btn-large.green.darken-4(onclick='validateMDF()')
            i.material-icons check

    div#selModal.modal.bottom-sheet.black
      div.modal-content
        h3 Pre Defined Maps
        h6.text-darken-4 Below contains the list of maps that have been used in prior leaderboard challenges
        h5 Academic Year 2019/2020 Semester 2
          p.modal-close(onclick="loadSavedMaps('1920s2w8')") Week 8
          p.modal-close(onclick="loadSavedMaps('1920s2w9')") Week 9
          p.modal-close(onclick="loadSavedMaps('1920s2w10')") Week 10
        h5 Academic Year 2019/2020 Semester 1
          p.modal-close(onclick="loadSavedMaps('1920s1w8')") Week 8
          p.modal-close(onclick="loadSavedMaps('1920s1w9')") Week 9
          p.modal-close(onclick="loadSavedMaps('1920s1w10')") Week 10
          p.modal-close(onclick="loadSavedMaps('1920s1w11')") Week 11
      div.modal-footer.black
        a.modal-close.waves-effect.waves-green.red.white-text.btn-flat(href="#!") close

  script.
    obstacleMode = false;
    selectorGrid = new Array(300).fill(0);
    submittedGrid = new Array(300).fill(-1);

    function updateMap(contents) {
      console.log(contents);
      contents = contents.replace(/(?:\r\n|\r|\n)/g, '');
      console.log(contents);
      for (var i = 0; i < contents.length; i++) {
        selectorGrid[i] = parseInt(contents.charAt(i));
      }
      drawSelectorGrid();
    }

    function openFile(func) {
      readFile = function (e) {
        var file = e.target.files[0];
        if (!file) {
          return;
        }
        var reader = new FileReader();
        reader.onload = function (e) {
          var contents = e.target.result;
          fileInput.func(contents)
          document.body.removeChild(fileInput)
        }
        reader.readAsText(file)
      }
      fileInput = document.createElement("input")
      fileInput.type = 'file'
      fileInput.style.display = 'none'
      fileInput.onchange = readFile
      fileInput.func = func
      document.body.appendChild(fileInput)
      fileInput.click();
    }

    function importMap() {
      openFile(updateMap);
    }

    async function loadSavedMaps(map) {
      console.log(map);
      M.toast({html: 'Loading Map...', displayLength: 1000});
      var filePath = `/maps/${map}.txt`;
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.open("GET", filePath, true);
      xmlhttp.send();
      xmlhttp.onload = function () {
        if (xmlhttp.status == 200) {
          var result = xmlhttp.responseText;
          console.log("LOaded");
          updateMap(result);
        }
        return result;
      };
    }

    function exportMap() {
      var textToSave = selectorGrid.toString().replace(/,/g, "").replace(/(.{15})/g, "$1\n");
      var hiddenElement = document.createElement('a');
      hiddenElement.href = 'data:attachment/text,' + encodeURI(textToSave);
      hiddenElement.target = '_blank';
      hiddenElement.download = 'sampleArena.txt';
      hiddenElement.click();
    }

    function initialize() {
      console.log("Initializing");
      drawSelectorGrid();
      drawSubmittedGrid();
    }

    function setGrid(i) {
      if (!obstacleMode) return;
      console.log("Selected:", i);
      let cell = $(`#samplegrid-${i}`);
      if (cell.hasClass("mdp-free")) {
        selectorGrid[i] = 1;
        cell.removeClass("mdp-free");
        cell.addClass("mdp-obstacle");
      } else if (cell.hasClass("mdp-obstacle")) {
        selectorGrid[i] = 0;
        cell.removeClass("mdp-obstacle");
        cell.addClass("mdp-free")
      } else console.log("NO CLASS FOUND");
    }

    function drawSelectorGrid() {
      console.log("Generating Default Grid");
      let table = $("#sampleArena");
      table.html("");
      selectorGrid.forEach((element, i) => {
        switch (element) {
          case 0:
            table.append(`<div class="mdp-free" id="samplegrid-${i}" onclick="setGrid(${i})"> </div>`);
            break;
          case 1:
            table.append(`<div class="mdp-obstacle" id="samplegrid-${i}" onclick="setGrid(${i})"> </div>`);
            break;
        }
      });
    }

    function drawSubmittedGrid() {
      console.log("Generating Submission Grid");
      console.log("Submission Grid Length:", submittedGrid.length);
      let table = $("#submittedArena");
      table.html("");
      submittedGrid.forEach((element, i) => {
        switch (element) {
          case 0:
            table.append(`<div id="sg-${i}" class="mdp-free"> </div>`);
            break;
          case -1:
            table.append(`<div id="sg-${i}" class="mdp-unexplored"> </div>`);
            break;
          case 1:
            table.append(`<div id="sg-${i}" class="mdp-obstacle"> /div>`);
            break;
        }
      });
    }

    function process() {
      console.log("lol " + obstacleMode);
    }

    function toggleObstacle() {
      obstacleMode = !obstacleMode;
      if (obstacleMode) $("#prompt").removeClass("hide-elem");
      else $("#prompt").addClass("hide-elem");
    }

    var mdfHex = /[0-9A-Fa-f]+/g;

    function isHex(hex) {
      try {
        ans = BigInt("0x" + hex);
      } catch (err) {
        if (err.name == "SyntaxError") return false;
        else {
          console.log(err);
          return false;
        }
      }
      return true;
    }

    function calcScore() {
      var correct = 0; // +1 score
      var incorrect = 0; // -10 score
      var unexplored = 0; // -2 score
      submittedGrid.forEach(elem => {
        if (elem == -1) unexplored++;
      });
      for (var i = 0; i < 300; i++) {
        var s = submittedGrid[i];
        var g = selectorGrid[i];
        var o = $(`#sg-${i}`);
        if (s == -1) continue;
        if (s != g) {
          incorrect++;
          //o.html('<span class="incorrect">✗</span>');
          o.addClass("incorrect");
          o.text("✗");
        } else {
          correct++;
          //o.html('<span class="correct">✓</span>');
          o.addClass("correct");
          o.text("✓");
        }
      }
      var score = correct - (incorrect * 10) - (unexplored * 2);
      // Update
      $("#resultScore").text(score);
      $("#resultC").text(correct);
      $("#resultI").text(incorrect);
      $("#resultU").text(unexplored);
      $("#result").removeClass("hide-elem");
    }

    function validateMDF() {
      console.log("Validating...")
      var mdf1 = $("#mdf1").val();
      var mdf2 = $("#mdf2").val();
      $("#mdf1").removeClass("invalid");
      $("#mdf2").removeClass("invalid");
      console.log("MDF 1:", mdf1, " | MDF 2:", mdf2);
      if (mdf1 === '') {
        console.log("ERROR");
        $("#mdf1").addClass("invalid");
        $("#helper-mdf1").attr("data-error", "Exploration MDF String not found");
        return;
      } else if (mdf2 === '') {
        console.log("ERROR");
        $("#mdf2").addClass("invalid");
        $("#helper-mdf2").attr("data-error", "Obstacle MDF String not found");
        return;
      }
      // Check MDF Hex
      if (!isHex(mdf1)) {
        $("#mdf1").addClass("invalid");
        $("#helper-mdf1").attr("data-error", "Invalid Hexadecimal String");
        return;
      } else if (!isHex(mdf2)) {
        $("#mdf2").addClass("invalid");
        $("#helper-mdf2").attr("data-error", "Invalid Hexadecimal String");
        return;
      } else console.log("Validation Successful, Checking");
      M.toast({html: 'Validating MDF String...', displayLength: 2000});

      let xhr = new XMLHttpRequest();
      xhr.open('POST', '/submitMDF');
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhr.send(`mdf1=${mdf1}&mdf2=${mdf2}`);
      xhr.onload = function () {
        console.log(`Loaded: ${xhr.status} ${xhr.response}`);
        console.log(xhr.response);
        console.log(typeof (xhr.response));
        if (xhr.status == 200) {
          console.log(submittedGrid.length);
          submittedGrid = xhr.response.split(',').map(Number);
          console.log(submittedGrid.length);
          console.log(submittedGrid);
          drawSubmittedGrid();
          calcScore();
        } else {
          var gs = offlineMdfCalculation(mdf1, mdf2);
          submittedGrid = gs.split(',').map(Number);
          console.log(submittedGrid.length);
          console.log(submittedGrid);
          drawSubmittedGrid();
          calcScore();
        }
      };
      xhr.onerror = function () { // only triggers if the request couldn't be made at all
        console.log(`Network error, going offline mode`);
        var gs = offlineMdfCalculation(mdf1, mdf2);
        submittedGrid = gs.split(',').map(Number);
        console.log(submittedGrid.length);
        console.log(submittedGrid);
        drawSubmittedGrid();
        calcScore();
      };
    }

    $(document).ready(function () {
      initialize();
      $('.fixed-action-btn').floatingActionButton({hoverEnabled: false});
      $('.fixed-action-btn').floatingActionButton("open");
      $('.modal').modal();
    });

  script.
    // Server side code for offline use
    function hex2bin(hex) {
      return BigInt("0x" + hex).toString(2);
    }

    function replaceAll(str, find, replace) {
      return str.replace(new RegExp(find, 'g'), replace);
    }

    function reverse2DArr(arr) {
      var reversed = arr.map(function reverse(item) {
        return Array.isArray(item) && Array.isArray(item[0]) ? item.map(reverse) : item.reverse();
      });
      return reversed;
    }

    const DEBUG = false;

    function printMapDbg(arr, override = false) {
      if (!DEBUG && !override) return;
      console.log("=======================================");
      for (var i = 0; i < 15; i++) {
        s = "";
        for (var j = 0; j < 20; j++) {
          s += arr[j][i].toString();
        }
        console.log(s);
      }
      console.log("=======================================");
    }

    function offlineMdfCalculation(mdf1, mdf2) {
      console.log("Calculating MDF Offline");
      console.log("MDF1:", mdf1, ", MDF2:", mdf2);
      var m1 = hex2bin(mdf1);
      m1 = m1.substring(2, 302);
      console.log("Explored MDF:", m1);
      var exploredLen = replaceAll(m1, "0", "").length;
      var obstaclePad = exploredLen % 4;
      console.log("Explored Length:", exploredLen, "| Obstacle Padding:", obstaclePad);
      var m2s = mdf2;
      console.log("Obstacle MDF Hex Len:", m2s.length);
      var m2 = hex2bin(mdf2);
      var mdfHexToBin = m2s.length * 4;
      m2 = "0".repeat(mdfHexToBin - m2.length) + m2;
      console.log("Obstacle MDF:", m2, "| Obstacle MDF Len:", m2.length);
      console.log("Parsing Explored MDF");
      const MAPCOL = 15;
      const MAPROW = 20;
      var j = 0;
      var exploredMap = new Array(MAPROW).fill(0).map(() => new Array(MAPCOL).fill(0));
      for (var i = 0; i < MAPROW; i++) {
        for (var j = 0; j < MAPCOL; j++) {
          var conv = parseInt(m1.charAt(i * MAPCOL + j));
          exploredMap[j][i] = (conv == 0) ? -1 : 0;
        }
      }
      printMapDbg(exploredMap);
      console.log("Parsing Obstacle MDF");
      var counter = 0;
      for (var i = 0; i < MAPROW; i++) {
        for (var j = 0; j < MAPCOL; j++) {
          var str = m2.charAt(counter);
          if (exploredMap[j][i] == 0) {
            if (str == '1') {
              exploredMap[j][i] = 1;
            }
            counter++;
          }
        }
      }
      printMapDbg(exploredMap);
      // bottom up invert
      console.log("Reversing Array to send back to client")
      exploredMap = reverse2DArr(exploredMap);
      printMapDbg(exploredMap, true);

      console.log("Concatanting array into string. Len:", exploredMap.length * exploredMap[0].length);
      var send = "";
      for (var i = 0; i < MAPROW; i++) {
        for (var j = 0; j < MAPCOL; j++) {
          send += exploredMap[j][i] + ",";
        }
      }
      return send.replace(/(^,)|(,$)/g, "");
    }
