<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://fonts.googleapis.com/css?family=Product+Sans&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha256-pasqAKBDmFT4eHoN2ndd6lN370kFiGUFyTiUHWhU7k8=" crossorigin="anonymous"></script>
  </head>
  <body onload="initialize()">
    <h1 class="header"><%= title %></h1>
    <p class="header">Select your options and enter your MDF from the options below. Left map is sample map, Right map is MDF map</p>
    <div id="btnConstruct" class="header">
      <button onclick="importMap()">Import Map</button>
      <button onclick="exportMap()">Export Map</button>
      <button id="btnObstacleSet" onclick="toggleObstacle()">Enable Obstacle Placement Mode</button>
    </div>
    <p id="prompt" class="header">Enter MDF Strings below to validate</p>
    <div id="btnConstruct" class="header">
      <input type="text" placeholder="MDF String 1" id="mdf1" class="tblong" /><br>
      <input type="text" placeholder="MDF String 2" id="mdf2" class="tblong" /><br>
      <button id="validate" class="tblong" onclick="validateMDF()">Validate MDF!</button>
    </div>

    <div id="result" class="header">Score: <span id="resultScore">0</span> (<span id="resultC">0</span> correct, <span id="resultI">0</span> incorrect, <span id="resultU">0</span> unexplored)</div>

    <div class="header largetopgap">
      <div class="mdp-container" id="sampleArena"></div>
      <div class="mdp-container padleft" id="submittedArena"></div>
    </div>
    
    <script>
      obstacleMode = false;
      selectorGrid = new Array(300).fill(0);
      submittedGrid = new Array(300).fill(-1);

      function updateMap(contents) {
        console.log(contents);
        contents = contents.replace(/(?:\r\n|\r|\n)/g, '');
        console.log(contents);
        for (var i = 0; i < contents.length; i++) {
          selectorGrid[i] = parseInt(contents.charAt(i));
        }
        drawSelectorGrid();
      }
      function openFile(func) {
        readFile = function(e) {
          var file = e.target.files[0];
          if (!file) {
            return;
          }
          var reader = new FileReader();
          reader.onload = function(e) {
            var contents = e.target.result;
            fileInput.func(contents)
            document.body.removeChild(fileInput)
          }
          reader.readAsText(file)
        }
        fileInput = document.createElement("input")
        fileInput.type='file'
        fileInput.style.display='none'
        fileInput.onchange=readFile
        fileInput.func=func
        document.body.appendChild(fileInput)
        fileInput.click();
      }

      function importMap() {
        openFile(updateMap);
      }

      function exportMap() {
        var textToSave = selectorGrid.toString().replace(/,/g, "").replace(/(.{15})/g,"$1\n");

        var hiddenElement = document.createElement('a');

        hiddenElement.href = 'data:attachment/text,' + encodeURI(textToSave);
        hiddenElement.target = '_blank';
        hiddenElement.download = 'sampleArena.txt';
        hiddenElement.click();
      }

      function initialize() {
        console.log("Initializing");
        drawSelectorGrid();
        drawSubmittedGrid();
      }

      function setGrid(i) {
        if (!obstacleMode) return;
        console.log("Selected:", i);
        let cell = $(`#samplegrid-${i}`);
        if (cell.hasClass("mdp-free")) {
          selectorGrid[i] = 1;
          cell.removeClass("mdp-free");
          cell.addClass("mdp-obstacle");
        } else if (cell.hasClass("mdp-obstacle")) {
          selectorGrid[i] = 0;
          cell.removeClass("mdp-obstacle");
          cell.addClass("mdp-free")
        } else console.log("NO CLASS FOUND");
      }

      function drawSelectorGrid() {
        console.log("Generating Default Grid");
        let table = $("#sampleArena");
        table.html("");
        selectorGrid.forEach((element, i) => {
          switch (element) {
            case 0: table.append(`<div class="mdp-free" id="samplegrid-${i}" onclick="setGrid(${i})"> </div>`); break;
            case 1: table.append(`<div class="mdp-obstacle" id="samplegrid-${i}" onclick="setGrid(${i})"> </div>`); break;
          }
        });
      }

      function drawSubmittedGrid() {
        console.log("Generating Submission Grid");
        console.log("Submission Grid Length:", submittedGrid.length);
        let table = $("#submittedArena");
        table.html("");
        submittedGrid.forEach((element, i) => {
          switch (element) {
            case 0: table.append(`<div id="sg-${i}" class="mdp-free"> </div>`); break;
            case -1: table.append(`<div id="sg-${i}" class="mdp-unexplored"> </div>`); break;
            case 1: table.append(`<div id="sg-${i}" class="mdp-obstacle"> /div>`); break;
          }
        });
      }

      function process() {
        console.log("lol " + obstacleMode);
      }

      function toggleObstacle() {
        obstacleMode = !obstacleMode;
        if (obstacleMode) {
          $("#btnObstacleSet").html("Disable Obstacle Placement Mode");
          $("#prompt").text("Obstacle Mode Enabled, click map to set obstacle");
        } else {
          $("#btnObstacleSet").html("Enable Obstacle Placement Mode");
          $("#prompt").text("Enter MDF strings below to validate");
        }
      }

      var mdfHex = /[0-9A-Fa-f]+/g;

      function isHex(hex){
        try {
          ans = BigInt("0x" + hex);
        } catch (err) {
          if (err.name == "SyntaxError") return false;
          else {
            console.log(err);
            return false;
          }
        }
        return true;
      }

      function calcScore() {
        var correct = 0; // +1 score
        var incorrect = 0; // -10 score
        var unexplored = 0; // -2 score
        submittedGrid.forEach(elem => {
          if (elem == -1) unexplored++;
        });
        for (var i = 0; i < 300; i++) {
          var s = submittedGrid[i];
          var g = selectorGrid[i];
          var o = $(`#sg-${i}`);
          if (s == -1) continue;
          if (s != g) {
            incorrect++;
            //o.html('<span class="incorrect">✗</span>');
            o.addClass("incorrect");
            o.text("✗");
          }
          else {
            correct++;
            //o.html('<span class="correct">✓</span>');
            o.addClass("correct");
            o.text("✓");
          }
        }
        var score = correct - (incorrect * 10) - (unexplored * 2);
        // Update
        $("#resultScore").text(score);
        $("#resultC").text(correct);
        $("#resultI").text(incorrect);
        $("#resultU").text(unexplored);
        $("#result").css("visibility", "visible");
      }

      function validateMDF() {
        console.log("Validating...")
        var mdf1 = $("#mdf1").val();
        var mdf2 = $("#mdf2").val();
        console.log("MDF 1:", mdf1, " | MDF 2:", mdf2);
        if (!mdf1 === '' || mdf2 === '') {
          console.log("ERROR");
          alert("Both MDF Strings are required to validate board");
          return;
        }
        // Check MDF Hex
        if (!isHex(mdf1)) { alert('MDF 1 is not a valid hexadecimal string'); return; } 
        else if (!isHex(mdf2)) { alert('MDF 2 is not a valid hexadecimal string'); return; } 
        else console.log("Validation Successful, Checking");
        
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '/submitMDF');
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.send(`mdf1=${mdf1}&mdf2=${mdf2}`);
        xhr.onload = function() {
          console.log(`Loaded: ${xhr.status} ${xhr.response}`);
          console.log(xhr.response);
          console.log(typeof(xhr.response));
          if (xhr.status == 200) {
            console.log(submittedGrid.length);
            submittedGrid = xhr.response.split(',').map(Number);
            console.log(submittedGrid.length);
            console.log(submittedGrid);
            drawSubmittedGrid();
            calcScore();
          }
        };

        xhr.onerror = function() { // only triggers if the request couldn't be made at all
          alert(`Network Error`);
        };
      }
    </script>
  </body>
</html>
